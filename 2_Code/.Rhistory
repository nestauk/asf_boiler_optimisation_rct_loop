### ~~~ Part 0: Importing data ~~~ ###
# Import dummy data
data <- read_csv(paste(data_path, "EventData.csv", sep="/")) |>
janitor::clean_names()
## This can be ignored when using the correct dataset.
#~~~ Cleaning and exploring
head(data)
str(data)
# Creating opt-out variable
data <- data |>
mutate( opt_in = case_when(
took_part == "TRUE" ~ 1,
took_part == "FALSE" ~ 0,
TRUE ~ 99
))
usage <- data$usage
usage <- as.data.frame(data$usage)
usage <- data |>
cut(usage,
20,
)
class(data$usage)
usage <- cut(data$usage, 20)
usage <- as.data.frame(cut(data$usage, 20))
View(usage)
data <- data |>
mutage(usage_bucket = cut(usage, 20))
data <- data |>
mutate(usage_bucket = cut(usage, 20))
View(data)
data <- data |>
order(usage) |>
mutate(usage_bucket = cut(usage, 20))
# Import dummy data
data <- read_csv(paste(data_path, "EventData.csv", sep="/")) |>
janitor::clean_names()
## This can be ignored when using the correct dataset.
#~~~ Cleaning and exploring
head(data)
str(data)
# Creating opt-out variable
data <- data |>
mutate( opt_in = case_when(
took_part == "TRUE" ~ 1,
took_part == "FALSE" ~ 0,
TRUE ~ 99
))
data <- data |>
order(usage) |>
mutate(usage_bucket = cut(usage, 20))
data <- data |>
arrange(usage) |>
mutate(usage_bucket = cut(usage, 20))
tabyl(data$usage_bucket)
descr(data$usage)
data <- data |>
mutate(usage_bucket = case_when(
usage <= 50 ~ 1,
usage <= 100 ~ 2,
usage <= 150 ~ 3,
usage <= 200 ~ 4,
usage <= 250 ~ 5,
usage <= 300 ~ 6,
usage <= 350 ~ 7,
usage <= 400 ~ 8,
usage <= 450 ~ 9,
usage <= 500 ~ 10,
usage <= 550 ~ 11,
usage > 550 ~ 12,
TRUE ~ 99
))
??sd
data_summary <- data |>
summarise(mean, sd, .groups = usage_bucket)
data_summary <- data |>
summarise(usage, mean, sd, .groups = usage_bucket)
data_summary <- data |>
summarise(usage,
mean = ~mean(., na.rm = TRUE)
data_summary <- data |>
data_summary <- data |>
group_by(usage_bucket) |>
summarise(
mean = ~mean(usage, na.rm))
data_summary <- data |>
group_by(usage_bucket) |>
summarise(
mean = mean(usage, na.rm))
data_summary <- data |>
group_by(usage_bucket) |>
summarise(mean = mean(usage, na.rm = TRUE))
data_summary <- data |>
group_by(usage_bucket) |>
summarise(mean = mean(usage, na.rm = TRUE),
sd = sd(usage, na.rm = TRUE))
View(data_summary)
data_to_use <- data |>
filter(!duplicated(id)) |> ## Removing duplicates
mutate(rand = runif(1)) |> ## Generating random number
arrange(rand) ## Sorting by random number
data_to_use <- data_to_use |>
group_by(id) |>
mutate(treat_num = sample(2, 1, replace = TRUE)) |>
ungroup() |>
mutate(treatment = case_when(
treat_num == 1 ~ "Control",
treat_num == 2 ~ "Treatment",
TRUE ~ "Missing"
))
View(data_to_use)
# Fit model
fit <- glm(usage ~ treatment, family= "poisson", data = data_to_use)
res <- resid(model)
res <- resid(fit)
plot(fitted(fit), res)
plot(fitted(usage), res)
qqnorm(res)
plot(density(res))
mean(data$usage, na.rm = TRUE)
sd(data$usage, na.rm = TRUE)
sqrt(sd(data$usage, na.rm = TRUE))
install.packages("boot")
library(boot)
glm.diag.plots(fit)
fit <- lm(usage ~ treatment, data = data_to_use)
glm.diag.plots(fit)
res <- resid(fit)
plot(density(res))
qqplot(fit)
qqdensity(fit)
qqnorm(res)
fit <- lm(usage ~ treatment, data = data_to_use)
res <- resid(fit)
qqnorm(res)
fit_glm <- glm(usage ~ treatment, family= "poisson", data = data_to_use)
fit_lm <- lm(usage ~ treatment, data = data_to_use)
plot(fit_lm)
plot(fit_glm)
res_glm <- resid(fit_glm)
qqnorm(res_glm)
plot(density(res_glm))
qqnorm(res_glm)
res_lm <- resid(fit_lm)
qqnorm(res_lm)
plot(density(res_lm))
plot(fit_glm)
plot(fit_lm)
fit_log <- lm(log(usage+1) ~ treatment, data = data_to_use)
plot(fit_log)
plot(fit_lm)
glm.diag.plots(fit_glm)
plot(fit_lm, 1)
plot(fit_glm, 1)
plot(fit_log, 1)
plot(fit_lm, 1)
plot(fit_glm, 1)
plot(fit_lm, 2)
plot(fit_glm, 2)
plot(fit_log, 2)
plot(fit_lm, 2)
summary(data$usage)
descr(data$usage)
hist(data$usage) ## Looks very skewed
hist(log(data$usage[data$usage != 0])) ## Looks more normal
nrow(data) ## 14,616 rows
length(data$usage[data$usage == 0]) ## 348 zeros (roughly 2%)
hist(log(data$usage) +1)
fit_glm <- glm(usage ~ treatment, family= "poisson", data = data_to_use)
fit_lm <- lm(usage ~ treatment, data = data_to_use)
fit_log <- lm(log(usage+1) ~ treatment, data = data_to_use)
res_lm <- resid(fit_lm)
qqnorm(res_lm)
plot(fit)
shapiro.test(fit_lm)
shapiro.test(res_lm)
shapiro.test(fit_lm[['residuals']])
hist(rpois(10000,5))
ggplot(data = data) +
aes(x = usage) +
geom_area()
ggplot(data = data) +
aes(x = usage) +
geom_area(stat = "bin")
ggplot(data = data) +
aes(x = usage) +
geom_histogram(bins = 1e3)
plot(data$usage)
plot(x = data$usage)
ggplot(data = data) +
aes(x = usage) +
geom_histogram(bins = 1e3)
ggplot(data = data) +
aes(x = usage) +
geom_histogram(bins = 1e4)
ggplot(data = data) +
aes(x = usage) +
geom_histogram(bins = 1e4)
ggplot(data = data) +
aes(x = usage) +
geom_histogram(bins = 2e3)
ggplot(data = data) +
aes(x = usage) +
geom_histogram(bins = 1e3)
ggplot(data = data[data$usage<5e3, ]) +
aes(x = usage) +
geom_histogram(bins = 1e3)
ggplot(data = data[data$usage>0, ]) +
aes(x = log(usage)) +
geom_histogram(bins = 1e3)
ggplot(data = data[data$usage>0, ]) +
aes(x = log(usage)) +
geom_histogram(bins = 1e2)
ggplot(data = data[data$usage>0, ]) +
aes(x = log(usage)) +
geom_histogram(bins = 1e3)
ggplot(data = data, ]) +
ggplot(data = data) +
aes(x = usage) +
geom_histogram(data = data[data$opt_in == 1, ], fill = "red", alpha = 0.2, bins = 1e3) +
geom_histogram(data = data[data$opt_in == 0, ], fill = "blue", alpha = 0.2, bins = 1e3)
ggplot(data = data[data$usage<5e3, ]) +
aes(x = usage) +
geom_histogram(data = data[data$opt_in == 1, ], fill = "red", alpha = 0.2, bins = 1e3) +
geom_histogram(data = data[data$opt_in == 0, ], fill = "blue", alpha = 0.2, bins = 1e3)
ggplot(data = data[data$usage<5e3, ]) +
aes(x = usage) +
geom_density(data = data[data$opt_in == 1, ], fill = "red", alpha = 0.2) +
geom_density(data = data[data$opt_in == 0, ], fill = "blue", alpha = 0.2)
data |>
filter(usage < 5e3) |>
ggplot() +
aes(x = usage) +
geom_density(data = data[data$opt_in == 1, ], fill = "red", alpha = 0.2) +
geom_density(data = data[data$opt_in == 0, ], fill = "blue", alpha = 0.2)
data |>
filter(usage < 5e3) |>
ggplot() +
aes(x = usage) +
geom_density(data = data[data$opt_in == 1, ], fill = "red", alpha = 0.2) +
geom_density(data = data[data$opt_in == 0, ], fill = "blue", alpha = 0.2)
ggplot(data = data) +
aes(x = usage) +
geom_density(data = data[data$opt_in == 1 & data$usage<5e3, ], fill = "red", alpha = 0.2) +
geom_density(data = data[data$opt_in == 0 & data$usage<5e3, ], fill = "blue", alpha = 0.2)
ggplot(data = data) +
aes(x = usage) +
geom_histogram(data = data[data$opt_in == 1 & data$usage<5e3, ], fill = "red", alpha = 0.2) +
geom_histogram(data = data[data$opt_in == 0 & data$usage<5e3, ], fill = "blue", alpha = 0.2)
ggplot(data = data) +
aes(x = usage) +
geom_histogram(data = data[data$opt_in == 1 & data$usage<5e3, ], fill = "red", alpha = 0.2, bins = 500) +
geom_histogram(data = data[data$opt_in == 0 & data$usage<5e3, ], fill = "blue", alpha = 0.2, bins = 500)
ggplot(data = data) +
aes(x = usage) +
geom_histogram(data = data[data$opt_in == 1 & data$usage<3e3, ], fill = "red", alpha = 0.2, bins = 500) +
geom_histogram(data = data[data$opt_in == 0 & data$usage<3e3, ], fill = "blue", alpha = 0.2, bins = 500)
ggplot(data = data) +
aes(x = usage) +
geom_density(data = data[data$opt_in == 1 & data$usage<5e3, ], fill = "red", alpha = 0.2) +
geom_density(data = data[data$opt_in == 0 & data$usage<5e3, ], fill = "blue", alpha = 0.2)
View(data_to_use)
fit_log <- lm(log(usage +1 ) ~ treatment, data = data_to_use)
qqnorm(fit_log)
View(fit_log)
qqnorm(fit_lm["residuals"])
qqnorm(fit_lm[[residuals])
qqnorm(fit_lm$residuals)
plot(fit_log)
plot(fit_log)
fit_log <- lm(log(usage) ~ treatment, data = data_to_use[data_to_use$usage != 0, ])
plot(fit_log)
qqnorm(fit_lm$residuals)
qqnorm(fit_log$residuals)
plot(log(usage) ~ treatment, data = data_to_use[data_to_use$usage != 0, ])
plot(usage ~ treatment, data = data_to_use)
res_log <- resid(fit_log)
qqline(res_log)
fit_log <- lm(log(usage) ~ treatment, data = data_to_use[data_to_use$usage != 0, ])
res_log <- resid(fit_log)
qqline(res_log)
qqnorm(res_log)
plot(fit_log)
plot(fit_log)
library(janitor) #------- Useful for cleaning
library(stringr) #------- String operations (`str_wrap`)
library(purrr) #--------- Vectorization
library(data.table) #---- For transposing
library(readr) #--------- Reading csv files
library(readxl) #-------- Reading Excel files
library(summarytools) #-- Descriptive statistics
library(jtools) #-------- Regression outputs
library(lmtest) #-------- Robust SEs
# Data pathways
bas_dir <- "C:/Users/oli.berry/Documents/GitHub/asf_boiler_optimisation_rct_loop/"
data_path <- file.path(bas_dir, "1_Data")
out_dir <- file.path(bas_dir, "3_Outputs")
# Set seed
set.seed(20230103)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
### ~~~ Summary of code ~~~ ###
## This code is used to randomise Loop's customers into one of three experimental
## arms: Treatment 1 (T1), Treatment 2 (T2), or Control group (C)
## We used stratified randomisation to achieve this, stratifying on region. This
## is because region correlates with gas consumption because of weather and other
## regional factors.
## Additionally, we allocate customers in Treatment 1 or Treatment 2 to one of
## four email variants, as follows:
## 1) Standard email
## 2) Thermostat advice variant
## 3) TRV advice variant
## 4) Social norms variant
## This will be achieved using simple randomisation.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
### ~~~ Part 0: Importing data ~~~ ###
# Import dummy data
data <- read_csv(paste(data_path, "EventData.csv", sep="/")) |>
janitor::clean_names()
## This can be ignored when using the correct dataset.
#~~~ Cleaning and exploring
head(data)
str(data)
# Creating opt-out variable
data <- data |>
mutate( opt_in = case_when(
took_part == "TRUE" ~ 1,
took_part == "FALSE" ~ 0,
TRUE ~ 99
))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
### ~~~ Part 1: Exploring data ~~~ ###
# ~~ I. Usage ~~ #
#~~~ Summary statistics
summary(data$usage)
descr(data$usage)
nrow(data) ## 14,616 rows
length(data$usage[data$usage == 0]) ## 348 zeros (roughly 2%)
#~~~ Graphing
hist(data$usage) ## Looks very skewed
hist(log(data$usage[data$usage != 0])) ## Looks more normal
hist(log(data$usage) +1)
# ~~ II. Opt ins ~~ #
summary(data$opt_in)
tabyl(data$opt_in) # 61% opt-in
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
### ~~~ Part 2: Looping ~~~ ###
## Addressing research questions
# ~~ I. Setting up loop ~~ #
#~~~ Parameters
sample_seq <- seq(1e3, 14e3, 500) ## To use all available sample.
sims <- length(sample_seq) * 3 ## Number of simulations
sim <- 0
# Looping
for (i in 1:sims) {
# Sim count
sim <- sim + 1
#~~~ Selecting sample size
## We create a new dataframe so we don't need to import the data each time.
data_to_use <- data |>
filter(!duplicated(id)) |> ## Removing duplicates
mutate(rand = runif(1)) |> ## Generating random number
arrange(rand) ## Sorting by random number
# Subsetting
sample <- sample_seq[(sim %% (length(sample_seq)) +1)]
data_to_use <- data_to_use |>
filter(row_number() <= sample)
#~~~ Random treatment assignment
data_to_use <- data_to_use |>
group_by(id) |>
mutate(treat_num = sample(2, 1, replace = TRUE)) |>
ungroup() |>
mutate(treatment = case_when(
treat_num == 1 ~ "Control",
treat_num == 2 ~ "Treatment",
TRUE ~ "Missing"
))
# ~~ II. Running regression ~~ #
if (sim <= length(sample_seq) * 10) {
type <- "OLS"
# Fit model
fit <- lm(usage ~ treatment, data = data_to_use)
# Robust SEs
fit_coef <- coeftest(fit, vcov. = vcovHC, type = "HC3")
} else if (sim <= length(sample_seq) * 20) {
type <- "Logged"
data_to_use <- data_to_use |>
mutate(usage = log(usage + 1))
# Fit model
fit <- lm(usage ~ treatment, data = data_to_use)
# Robust SEs
fit_coef <- coeftest(fit, vcov. = vcovHC, type = "HC3")
} else {
type <- "Poisson"
# Fit model
fit <- glm(usage ~ treatment, family= "poisson", data = data_to_use)
# Robust SEs
fit_coef <- coeftest(fit, vcov. = vcovHC, type = "HC3")
}
# Converting to data frame
coef_df <- transpose(as.data.frame(fit_coef[2, ])) |>
mutate(beta = V1, se = V2, t_stat = V3, pval = V4) |>
select(-c(V1, V2, V3, V4))
# Control statistics
control_mean <- mean(data_to_use$usage[data_to_use$treatment == "Control"], na.rm = TRUE)
control_sd <- sd(data_to_use$usage[data_to_use$treatment == "Control"], na.rm = TRUE)
# ~~ IV. Aggregating ~~ #
# Binding columns
sim_data <- cbind(sim, sample, type, control_mean, control_sd, coef_df)
# Binding rows
if (sim == 1) {
output_data <- sim_data
# Exporting first regression to double check
sink(paste(out_dir,"first_regression_flex.txt", sep="/"))
# No covariates
fit_simple <- lm(usage ~ treatment, data = data_to_use)
print(summ(fit_simple))
print(summ(fit_simple, robust = "HC3"))
sink()
} else {
output_data <- rbind(output_data, sim_data)
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Title: "Loop Flex power code"
# Author: "Oli Berry"
# Date: "03/01/2023"
# Load packages
library(tidyverse) #----- Manipulating data (`case_when`)
library(janitor) #------- Useful for cleaning
library(stringr) #------- String operations (`str_wrap`)
library(purrr) #--------- Vectorization
library(data.table) #---- For transposing
library(readr) #--------- Reading csv files
library(readxl) #-------- Reading Excel files
library(summarytools) #-- Descriptive statistics
library(jtools) #-------- Regression outputs
library(lmtest) #-------- Robust SEs
#~~~ Parameters
sample_seq <- seq(1e3, 14e3, 500) ## To use all available sample.
sims <- length(sample_seq) * 3 ## Number of simulations
sim <- 0
# Looping
for (i in 1:sims) {
# Sim count
sim <- sim + 1
#~~~ Selecting sample size
## We create a new dataframe so we don't need to import the data each time.
data_to_use <- data |>
filter(!duplicated(id)) |> ## Removing duplicates
mutate(rand = runif(1)) |> ## Generating random number
arrange(rand) ## Sorting by random number
# Subsetting
sample <- sample_seq[(sim %% (length(sample_seq)) +1)]
data_to_use <- data_to_use |>
filter(row_number() <= sample)
#~~~ Random treatment assignment
data_to_use <- data_to_use |>
group_by(id) |>
mutate(treat_num = sample(2, 1, replace = TRUE)) |>
ungroup() |>
mutate(treatment = case_when(
treat_num == 1 ~ "Control",
treat_num == 2 ~ "Treatment",
TRUE ~ "Missing"
))
# ~~ II. Running regression ~~ #
if (sim <= length(sample_seq) * 10) {
type <- "OLS"
# Fit model
fit <- lm(usage ~ treatment, data = data_to_use)
# Robust SEs
fit_coef <- coeftest(fit, vcov. = vcovHC, type = "HC3")
} else if (sim <= length(sample_seq) * 20) {
type <- "Logged"
data_to_use <- data_to_use |>
mutate(usage = log(usage + 1))
# Fit model
fit <- lm(usage ~ treatment, data = data_to_use)
# Robust SEs
fit_coef <- coeftest(fit, vcov. = vcovHC, type = "HC3")
} else {
type <- "Poisson"
# Fit model
fit <- glm(usage ~ treatment, family= "poisson", data = data_to_use)
# Robust SEs
fit_coef <- coeftest(fit, vcov. = vcovHC, type = "HC3")
}
# Converting to data frame
coef_df <- transpose(as.data.frame(fit_coef[2, ])) |>
mutate(beta = V1, se = V2, t_stat = V3, pval = V4) |>
select(-c(V1, V2, V3, V4))
# Control statistics
control_mean <- mean(data_to_use$usage[data_to_use$treatment == "Control"], na.rm = TRUE)
control_sd <- sd(data_to_use$usage[data_to_use$treatment == "Control"], na.rm = TRUE)
# ~~ IV. Aggregating ~~ #
# Binding columns
sim_data <- cbind(sim, sample, type, control_mean, control_sd, coef_df)
# Binding rows
if (sim == 1) {
output_data <- sim_data
# Exporting first regression to double check
sink(paste(out_dir,"first_regression_flex.txt", sep="/"))
# No covariates
fit_simple <- lm(usage ~ treatment, data = data_to_use)
print(summ(fit_simple))
print(summ(fit_simple, robust = "HC3"))
sink()
} else {
output_data <- rbind(output_data, sim_data)
}
}
fit_coef <- coeftest(fit, vcov. = vcovHC, type = "HC3")
library(sandwich)
